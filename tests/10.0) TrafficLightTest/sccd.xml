<?xml version="1.0" ?>
<diagram author="Sam Pieters" name="TrafficLight">
    <description>
        Tkinter frame with Traffic light in a single statechart.
    </description>
    <top>
        from sccd.runtime.libs import ui_v2 as ui
        CANVAS_DIMS = (100, 350)
    </top>
    <outport name="ui"/>
    <class name="MainApp" default="true">
        <attribute name="window_id" />
        <attribute name="canvas_id" />
        <attribute name="green_id" />
        <attribute name="yellow_id" />
        <attribute name="red_id" />
        <attribute name="police_button_id" />
        <atrribute name="quit_button_id" />
        <inport name="field_ui"/>
        <scxml initial="creating_window">
            <state id="creating_window">
                <onentry>
                    <raise port="ui" event="create_window">
                        <parameter expr="CANVAS_DIMS[0]"/>
                        <parameter expr="CANVAS_DIMS[1]"/>
                        <parameter expr='"Traffic Light (history)"'/>
                        <parameter expr="self.inports['field_ui']"/>
                    </raise>
                </onentry>
                <transition event="window_created" target="../creating_canvas">
                    <parameter name="window_id" type="int" />
                    <script>
                        self.window_id = window_id
                    </script>
                </transition>
            </state>
            <state id="creating_canvas">
                <onentry>
                    <raise port="ui" event="create_canvas">
                        <parameter expr="self.window_id"/>
                        <parameter expr="CANVAS_DIMS[0]"/>
                        <parameter expr="CANVAS_DIMS[1] - 100"/>
                        <parameter expr="{'background':'#222222'}"/>
                        <parameter expr="self.inports['field_ui']"/>
                    </raise>
                </onentry>
                <transition event="canvas_created" target="../creating_trafficlight">
                    <parameter name="canvas_id" type="int"/>
                    <script>
                        self.canvas_id = canvas_id
                    </script>
                </transition>
            </state>
            <state id="creating_trafficlight" initial="creating_greenlight">
                <state id="creating_greenlight">
                    <onentry>
                        <raise port="ui" event="create_rectangle">
                            <parameter expr="self.canvas_id" />
                            <parameter expr="50" />
                            <parameter expr="50" />
                            <parameter expr="50" />
                            <parameter expr="50" />
                            <parameter expr="{'fill':'#000'}" />
                            <parameter expr="self.inports['field_ui']" />
                        </raise>
                    </onentry>
                    <transition event="rectangle_created" target="../creating_yellowlight">
                        <parameter name="canvas_id" type="int"/>
                        <parameter name="green_id" type="int" />
                        <script>
                            self.green_id = green_id
                        </script>
                    </transition>
                </state>
                <state id="creating_yellowlight">
                    <onentry>
                        <raise port="ui" event="create_rectangle">
                            <parameter expr="self.canvas_id" />
                            <parameter expr="50" />
                            <parameter expr="110" />
                            <parameter expr="50" />
                            <parameter expr="50" />
                            <parameter expr="{'fill':'#000'}" />
                            <parameter expr="self.inports['field_ui']" />
                        </raise>
                    </onentry>
                    <transition event="rectangle_created" target="../creating_redlight">
                        <parameter name="canvas_id" type="int"/>
                        <parameter name="yellow_id" type="int" />
                        <script>
                            self.yellow_id = yellow_id
                        </script>
                    </transition>
                </state>
                <state id="creating_redlight">
                    <onentry>
                        <raise port="ui" event="create_rectangle">
                            <parameter expr="self.canvas_id" />
                            <parameter expr="50" />
                            <parameter expr="170" />
                            <parameter expr="50" />
                            <parameter expr="50" />
                            <parameter expr="{'fill':'#000'}" />
                            <parameter expr="self.inports['field_ui']" />
                        </raise>
                    </onentry>
                    <transition event="rectangle_created" target="../../creating_interrupt_button">
                        <parameter name="canvas_id" type="int"/>
                        <parameter name="red_id" type="int" />
                        <script>
                            self.red_id = red_id
                        </script>
                    </transition>
                </state>
            </state>
            <state id="creating_interrupt_button">
                <onentry>
                    <raise port="ui" event="create_button">
                        <parameter expr="self.window_id" />
                        <parameter expr="'Police Interrupt'" />
                        <parameter expr="self.inports['field_ui']" />
                    </raise>
                </onentry>
                <transition event="button_created" target="../creating_quit_button">
                    <parameter name="button_id" type="int"/>
                    <script>
                        self.police_button_id = button_id
                    </script> 
                    <raise port="ui" event="bind_event">
                        <parameter expr="button_id"/>
                        <parameter expr="ui.EVENTS.MOUSE_CLICK"/>
                        <parameter expr='"interrupt_clicked"'/>
                        <parameter expr="self.inports['field_ui']"/>
                    </raise>
                </transition>
            </state>
            <state id="creating_quit_button">
                <onentry>
                    <raise port="ui" event="create_button">
                        <parameter expr="self.window_id" />
                        <parameter expr="'Quit'" />
                        <parameter expr="self.inports['field_ui']" />
                    </raise>
                </onentry>
                <transition event="button_created" target="../on">
                    <parameter name="button_id" type="int"/>
                    <script>
                        self.quit_button_id = button_id
                    </script> 
                    <raise port="ui" event="bind_event">
                        <parameter expr="button_id"/>
                        <parameter expr="ui.EVENTS.MOUSE_CLICK"/>
                        <parameter expr='"quit_clicked"'/>
                        <parameter expr="self.inports['field_ui']"/>
                    </raise>
                </transition>
            </state>
            <state id="on" initial="normal">
                <transition port='field_ui' event="quit_clicked" target='../off' cond="button == ui.MOUSE_BUTTONS.LEFT">
                    <parameter name="x" />
                    <parameter name="y" />
                    <parameter name="button" />
                </transition>
                <state id="normal" initial="red">
                    <transition port='field_ui' event="interrupt_clicked" target='../interrupted' cond="button == ui.MOUSE_BUTTONS.LEFT">
                        <parameter name="x" />
                        <parameter name="y" />
                        <parameter name="button" />
                        <raise port="ui" event="set_element_color">
                            <parameter expr="self.canvas_id" />
                            <parameter expr="self.green_id" />
                            <parameter expr="'black'" />
                        </raise>
                        <raise port="ui" event="set_element_color">
                            <parameter expr="self.canvas_id" />
                            <parameter expr="self.yellow_id" />
                            <parameter expr="'black'" />
                        </raise>
                        <raise port="ui" event="set_element_color">
                            <parameter expr="self.canvas_id" />
                            <parameter expr="self.red_id" />
                            <parameter expr="'black'" />
                        </raise>
                    </transition>
                    <state id="red">
                        <onentry>
                            <raise port="ui" event="set_element_color">
                                <parameter expr="self.canvas_id" />
                                <parameter expr="self.yellow_id" />
                                <parameter expr="'black'" />
                            </raise>
                            <raise port="ui" event="set_element_color">
                                <parameter expr="self.canvas_id" />
                                <parameter expr="self.red_id" />
                                <parameter expr="'red'" />
                            </raise>
                        </onentry>
                        <transition after='3' target='../green'/>
                    </state>
                    <state id="green">
                        <onentry>
                            <raise port="ui" event="set_element_color">
                                <parameter expr="self.canvas_id" />
                                <parameter expr="self.red_id" />
                                <parameter expr="'black'" />
                            </raise>
                            <raise port="ui" event="set_element_color">
                                <parameter expr="self.canvas_id" />
                                <parameter expr="self.green_id" />
                                <parameter expr="'green'" />
                            </raise>
                        </onentry>
                        <transition after='2' target='../yellow'/>
                    </state>
                    <state id="yellow">
                        <onentry>
                            <raise port="ui" event="set_element_color">
                                <parameter expr="self.canvas_id" />
                                <parameter expr="self.green_id" />
                                <parameter expr="'black'" />
                            </raise>
                            <raise port="ui" event="set_element_color">
                                <parameter expr="self.canvas_id" />
                                <parameter expr="self.yellow_id" />
                                <parameter expr="'yellow'" />
                            </raise>
                        </onentry>
                        <transition after='1' target='../red'/>
                    </state>
                </state>
                <state id="interrupted" initial="yellow">
                    <state id="yellow">
                        <onentry>
                            <raise port="ui" event="set_element_color">
                                <parameter expr="self.canvas_id" />
                                <parameter expr="self.yellow_id" />
                                <parameter expr="'yellow'" />
                            </raise>
                        </onentry>
                        <transition after='.5' target='../black'/>
                    </state>
                    <state id="black">
                        <onentry>
                            <raise port="ui" event="set_element_color">
                                <parameter expr="self.canvas_id" />
                                <parameter expr="self.yellow_id" />
                                <parameter expr="'black'" />
                            </raise>
                        </onentry>
                        <transition after='.5' target='../yellow'/>
                    </state>
                    <transition port='field_ui' event="interrupt_clicked" target='../normal' cond="button == ui.MOUSE_BUTTONS.LEFT">
                        <parameter name="x" />
                        <parameter name="y" />
                        <parameter name="button" />
                    </transition>
                </state>
            </state>
            <state id="off">
                <onentry>
                    <raise port="ui" event="set_element_color">
                        <parameter expr="self.canvas_id" />
                        <parameter expr="self.green_id" />
                        <parameter expr="'black'" />
                    </raise>
                    <raise port="ui" event="set_element_color">
                        <parameter expr="self.canvas_id" />
                        <parameter expr="self.yellow_id" />
                        <parameter expr="'black'" />
                    </raise>
                    <raise port="ui" event="set_element_color">
                        <parameter expr="self.canvas_id" />
                        <parameter expr="self.red_id" />
                        <parameter expr="'black'" />
                    </raise>
                </onentry>
            </state>
        </scxml>
    </class>
</diagram>