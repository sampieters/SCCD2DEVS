"""
Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration)

Model author: Sam Pieters
Model name:   AfterTransitionTest
Model description:
Test 3: Test if the composite state works as expected
"""

from sccd.runtime.statecharts_core import *

# package "AfterTransitionTest"

class MainApp(RuntimeClassBase):
    def __init__(self, controller):
        RuntimeClassBase.__init__(self, controller)
        
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # call user defined constructor
        MainApp.user_defined_constructor(self)
    
    def user_defined_constructor(self):
        pass
    
    def user_defined_destructor(self):
        pass
    
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        
        # state /state1
        self.states["/state1"] = State(1, "/state1", self)
        
        # state /state1/state10
        self.states["/state1/state10"] = State(2, "/state1/state10", self)
        
        # state /state1/state11
        self.states["/state1/state11"] = State(3, "/state1/state11", self)
        
        # state /state1/state12
        self.states["/state1/state12"] = State(4, "/state1/state12", self)
        
        # add children
        self.states[""].addChild(self.states["/state1"])
        self.states["/state1"].addChild(self.states["/state1/state10"])
        self.states["/state1"].addChild(self.states["/state1/state11"])
        self.states["/state1"].addChild(self.states["/state1/state12"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/state1"]
        self.states["/state1"].default_state = self.states["/state1/state11"]
        
        # transition /state1/state11
        _state1_state11_0 = Transition(self, self.states["/state1/state11"], [self.states["/state1/state12"]])
        _state1_state11_0.setTrigger(None)
        self.states["/state1/state11"].addTransition(_state1_state11_0)
        
        # transition /state1
        _state1_0 = Transition(self, self.states["/state1"], [self.states["/state1"]])
        _state1_0.setTrigger(None)
        self.states["/state1"].addTransition(_state1_0)
    
    def initializeStatechart(self):
        # enter default state
        self.default_targets = self.states["/state1"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class ObjectManager(ObjectManagerBase):
    def __init__(self, controller):
        ObjectManagerBase.__init__(self, controller)
    
    def instantiate(self, class_name, construct_params):
        if class_name == "MainApp":
            instance = MainApp(self.controller)
            instance.associations = {}
        else:
            raise Exception("Cannot instantiate class " + class_name)
        return instance

class Controller(ThreadsControllerBase):
    def __init__(self, keep_running = None, behind_schedule_callback = None):
        if keep_running == None: keep_running = True
        if behind_schedule_callback == None: behind_schedule_callback = None
        ThreadsControllerBase.__init__(self, ObjectManager(self), keep_running, behind_schedule_callback)
        self.object_manager.createInstance("MainApp", [])