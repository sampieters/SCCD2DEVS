"""
Generated by Statechart compiler by Glenn De Jonghe, Joeri Exelmans, Simon Van Mierlo, and Yentl Van Tendeloo (for the inspiration) and Sam Pieters (DEVS)

Model author: Sam Pieters
Model name:   IDK

"""

from sccd.runtime.DEVS_statecharts_core import *

# package "IDK"

class AInstance(RuntimeClassBase):
    def __init__(self, atomdevs, id, start_port_id):
        RuntimeClassBase.__init__(self, atomdevs, id)
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # call user defined constructor
        AInstance.user_defined_constructor(self)
        port_name = addInputPort("Input", start_port_id, True)
        atomdevs.state.port_mappings[port_name] = id
        port_name = addInputPort("<narrow_cast>", start_port_id)
        atomdevs.state.port_mappings[port_name] = id
    
    def user_defined_constructor(self):
        pass
    
    def user_defined_destructor(self):
        pass
    
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        
        # state /init
        self.states["/init"] = State(1, "/init", self)
        self.states["/init"].setEnter(self._init_enter)
        
        # state /initializing
        self.states["/initializing"] = State(2, "/initializing", self)
        
        # add children
        self.states[""].addChild(self.states["/init"])
        self.states[""].addChild(self.states["/initializing"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/init"]
        
        # transition /init
        _init_0 = Transition(self, self.states["/init"], [self.states["/initializing"]])
        _init_0.setAction(self._init_0_exec)
        _init_0.setTrigger(Event("instance_created", None))
        self.states["/init"].addTransition(_init_0)
    
    def _init_enter(self):
        self.big_step.outputEventOM(Event("create_instance", None, [self, 'BLink', 'B']))
    
    def _init_0_exec(self, parameters):
        instancename = parameters[0]
        self.big_step.outputEventOM(Event("start_instance", None, [self, instancename]))
    
    def initializeStatechart(self):
        # enter default state
        self.default_targets = self.states["/init"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class A(ClassBase):
    def __init__(self, name):
        ClassBase.__init__(self, name)
        self.input = self.addInPort("input")
        self.glob_outputs["Output"] = self.addOutPort("Output")
        new_instance = self.constructObject(0, 0, [])
        self.state.instances[new_instance.instance_id] = new_instance
        new_instance.start()
        self.state.next_time = 0
    
    def constructObject(self, id, start_port_id, parameters):
        new_instance = AInstance(self, id, start_port_id)
        return new_instance

class BInstance(RuntimeClassBase):
    def __init__(self, atomdevs, id, start_port_id):
        RuntimeClassBase.__init__(self, atomdevs, id)
        
        self.semantics.big_step_maximality = StatechartSemantics.TakeMany
        self.semantics.internal_event_lifeline = StatechartSemantics.Queue
        self.semantics.input_event_lifeline = StatechartSemantics.FirstComboStep
        self.semantics.priority = StatechartSemantics.SourceParent
        self.semantics.concurrency = StatechartSemantics.Single
        
        # build Statechart structure
        self.build_statechart_structure()
        
        # call user defined constructor
        BInstance.user_defined_constructor(self)
        port_name = addInputPort("Input", start_port_id, True)
        atomdevs.state.port_mappings[port_name] = id
        port_name = addInputPort("<narrow_cast>", start_port_id)
        atomdevs.state.port_mappings[port_name] = id
    
    def user_defined_constructor(self):
        pass
    
    def user_defined_destructor(self):
        pass
    
    
    # builds Statechart structure
    def build_statechart_structure(self):
        
        # state <root>
        self.states[""] = State(0, "", self)
        
        # state /init
        self.states["/init"] = State(1, "/init", self)
        
        # add children
        self.states[""].addChild(self.states["/init"])
        self.states[""].fixTree()
        self.states[""].default_state = self.states["/init"]
    
    def initializeStatechart(self):
        # enter default state
        self.default_targets = self.states["/init"].getEffectiveTargetStates()
        RuntimeClassBase.initializeStatechart(self)

class B(ClassBase):
    def __init__(self, name):
        ClassBase.__init__(self, name)
        self.input = self.addInPort("input")
        self.glob_outputs["Output"] = self.addOutPort("Output")
    
    def constructObject(self, id, start_port_id, parameters):
        new_instance = BInstance(self, id, start_port_id)
        return new_instance

def instantiate(self, class_name, construct_params):
    instance = {}
    instance["name"] = class_name
    if class_name == "A":
        self.narrow_cast_id = self.narrow_cast_id + 0
        instance["associations"] = {}
        instance["associations"]["BLink"] = Association("B", 1, 1)
    elif class_name == "B":
        self.narrow_cast_id = self.narrow_cast_id + 0
        instance["associations"] = {}
        instance["associations"]["parent"] = Association("A", 1, 1)
    else:
        raise Exception("Cannot instantiate class " + class_name)
    return instance
ObjectManagerState.instantiate = instantiate

class ObjectManager(ObjectManagerBase):
    def __init__(self, name):
        ObjectManagerBase.__init__(self, name)
        self.state = ObjectManagerState()
        self.input = self.addInPort("input")
        self.output["A"] = self.addOutPort()
        self.output["B"] = self.addOutPort()
        self.state.createInstance("A", [])

class Controller(CoupledDEVS):
    def __init__(self, name):
        CoupledDEVS.__init__(self, name)
        self.in_Input = self.addInPort("Input")
        self.out_Output = self.addOutPort("Output")
        self.objectmanager = self.addSubModel(ObjectManager("ObjectManager"))
        self.atomics = []
        self.atomics.append(self.addSubModel(A("A")))
        self.atomics.append(self.addSubModel(B("B")))
        self.connectPorts(self.atomics[0].obj_manager_out, self.objectmanager.input)
        self.connectPorts(self.objectmanager.output["A"], self.atomics[0].obj_manager_in)
        self.connectPorts(self.atomics[1].obj_manager_out, self.objectmanager.input)
        self.connectPorts(self.objectmanager.output["B"], self.atomics[1].obj_manager_in)
        self.connectPorts(self.atomics[0].glob_outputs["Output"], self.out_Output)
        self.connectPorts(self.in_Input, self.atomics[0].input)
        self.connectPorts(self.atomics[1].glob_outputs["Output"], self.out_Output)
        self.connectPorts(self.in_Input, self.atomics[1].input)